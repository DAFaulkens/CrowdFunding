<?php
/**
 * @package      ITPrism Components
 * @subpackage   CrowdFunding
 * @author       Todor Iliev
 * @copyright    Copyright (C) 2010 Todor Iliev <todor@itprism.com>. All rights reserved.
 * @license      http://www.gnu.org/copyleft/gpl.html GNU/GPL
 * CrowdFunding is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

// no direct access
defined('_JEXEC') or die;

jimport('joomla.application.component.modelform');

class CrowdFundingModelImport extends JModelForm {
    
    protected function populateState() {
        
        $app = JFactory::getApplication();
        /** @var $app JAdministrator **/
        
        // Load the filter state.
        $value = $app->getUserStateFromRequest('import.context', 'type', "currencies");
        $this->setState('import.context', $value);
        
	}
	
    /**
     * Method to get the record form.
     *
     * @param   array   $data       An optional array of data for the form to interogate.
     * @param   boolean $loadData   True if the form is to load its own data (default case), false if not.
     * @return  JForm   A JForm object on success, false on failure
     * @since   1.6
     */
    public function getForm($data = array(), $loadData = true){
        
        // Get the form.
        $form = $this->loadForm($this->option.'.import', 'import', array('control' => 'jform', 'load_data' => $loadData));
        if(empty($form)){
            return false;
        }
        
        return $form;
    }
    
    /**
     * Method to get the data that should be injected in the form.
     *
     * @return  mixed   The data for the form.
     * @since   1.6
     */
    protected function loadFormData(){
        // Check the session for previously entered form data.
        $data = JFactory::getApplication()->getUserState($this->option.'.edit.import.data', array());
        return $data;
    }
    
    public function extractFile($file, $destFolder) {
        
        // extract type
        $zipAdapter   = JArchive::getAdapter('zip'); 
        $zipAdapter->extract($file, $destFolder);
        
        $dir          = new DirectoryIterator($destFolder);
        
        foreach ($dir as $fileinfo) {
            if (!$fileinfo->isDot()) {
                $filePath     = $destFolder. DIRECTORY_SEPARATOR . JFile::makeSafe($fileinfo->getFilename());
            }
        }
            
        return $filePath;
    }
    
	/**
     * 
     * Import currencies from XML file.
     * The XML file is generated by the current extension ( CrowdFunding )
     * 
     * @param string    $file 	 	A path to file
     * @param bool  	$resteId	Reset existing IDs with new ones.
     */
    public function importCurrencies($file, $resteId = false) {
        
        $xmlstr  = file_get_contents($file);
        $content = new SimpleXMLElement($xmlstr);
        
        if(!empty($content)) {
            $items = array();
            $db    = JFactory::getDbo();
            
            $currencies = $content->currencies->children();
            
            foreach($currencies as $item) {
                
                // Check for missing ascii characters title
                $title        = JString::trim($item->title);
                if(!$title) {
                    continue;
                }
                
                $id =  (!$resteId) ? JString::trim($item->id) : "null";
                
                $items[] = $id.",".$db->quote($title).",".$db->quote(JString::trim($item->abbr)).",".$db->quote(JString::trim($item->symbol));
            }
            
            unset($currencies);
           
            $query = $db->getQuery(true);
                
            $query
                ->insert("#__crowdf_currencies")
                ->columns('id, title, abbr, symbol')
                ->values($items);
                
            $db->setQuery($query);
            $db->query();
            
        }
    }
    
    /**
     * 
     * Import locations from TXT or XML file.
     * The TXT file comes from geodata.org
     * The XML file is generated by the current extension ( CrowdFunding )
     * 
     * @param string    $file 	 	A path to file
     * @param bool  	$resteId	Reset existing IDs with new ones.
     */
    public function importLocations($file, $resteId = false) {
        
        $ext      = JString::strtolower( JFile::getExt($file) );
        
        switch($ext) {
            case "xml":
                $this->importLocationsXml($file, $resteId);
                break;
            default: // TXT
                $this->importLocationsTxt($file, $resteId);
                break;
        }
    }
    
    protected function importLocationsTxt($file, $resteId) {
        
        $content   = file($file);
        
        if(!empty($content)) {
            $items = array();
            $db    = JFactory::getDbo();
            
            unset($file);
            
            $i = 0; 
            $x = 0;
            foreach($content as $geodata) {
                
                $item        = mb_split("\t", $geodata);
                
                // Check for missing ascii characters name
                $name        = JString::trim($item[2]);
                if(!$name) { 
                    // If missing ascii characters name, use utf-8 characters name
                    $name    = JString::trim($item[1]);
                }
                
                // If missing name, skip the record
                if(!$name) {
                    continue;
                }
                
                $id =  (!$resteId) ? JString::trim($item[0]) : "null";
                
                $items[$x][] = $id.",".$db->quote($name).",".$db->quote(JString::trim($item[4])).",".$db->quote(JString::trim($item[5])).",".$db->quote(JString::trim($item[8])).",".$db->quote(JString::trim($item[17]));
                $i++;
                if($i == 500) {
                    $x++;
                    $i=0;
                }
            }
            
            unset($content);
           
            foreach($items as $item) {
                $query = $db->getQuery(true);
                    
                $query
                    ->insert("#__crowdf_locations")
                    ->columns('id, name, latitude, longitude, country_code, timezone')
                    ->values($item);
                    
                $db->setQuery($query);
                $db->query();
            }
            
//            var_dump($items[1]);exit;
            
        }
        
    }
    
    protected function importLocationsXml($file, $resteId) {
        
        $xmlstr  = file_get_contents($file);
        $content = new SimpleXMLElement($xmlstr);
        
        if(!empty($content)) {
            $items = array();
            $db    = JFactory::getDbo();
            
            $geodata = $content->locations->children();
            
            $i = 0; 
            $x = 0;
            foreach($geodata as $item) {
                
                // Check for missing ascii characters name
                $name        = JString::trim($item->name);
                
                // If missing name, skip the record
                if(!$name) {
                    continue;
                }
                
                $id =  (!$resteId) ? JString::trim($item->id) : "null";
                
                $items[$x][] = $id.",".$db->quote($name).",".$db->quote(JString::trim($item->latitude)).",".$db->quote(JString::trim($item->longitude)).",".$db->quote(JString::trim($item->country_code)).",".$db->quote(JString::trim($item->timezone));
                $i++;
                if($i == 500) {
                    $x++;
                    $i=0;
                }
            }
            
            unset($item);
            unset($geodata);
            unset($content);
           
            foreach($items as $item) {
                $query = $db->getQuery(true);
                    
                $query
                    ->insert("#__crowdf_locations")
                    ->columns('id, name, latitude, longitude, country_code, timezone')
                    ->values($item);
                    
                $db->setQuery($query);
                $db->query();
            }
            
//            var_dump($items[1]);exit;
            
        }
        
    }
    
    public function uploadFile($file){
        
        $app = JFactory::getApplication();
        /** @var $app JAdministrator **/
        
        // Check for errors
        $this->checkUploadErrors($file);
        
        // Save Image
        if(!empty($file['name'])){
            
            $dest   = JPath::clean( $app->getCfg("tmp_path") ) . DIRECTORY_SEPARATOR. JFile::makeSafe($file['name']);
            
            // Remove old file if exists
            if(is_file($dest)) {
                JFile::delete($dest);
            }
                
            if(!JFile::upload($file["tmp_name"], $dest)){
                throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_FILE_CANT_BE_UPLOADED'), ITPrismErrors::CODE_WARNING);
            }
            
        }

        return $dest;
    
    }
    
    protected function checkUploadErrors($uploadedFile){
        
        $app = JFactory::getApplication();
        /** @var $app JSite **/
        
        $serverContentLength = (int)$app->input->server->get('CONTENT_LENGTH');
        
        // Verify file size
        $uploadMaxFileSize   = (int)ini_get('upload_max_filesize');
        $uploadMaxFileSize   = $uploadMaxFileSize * 1024 * 1024;
        
        $postMaxSize         = (int)(ini_get('post_max_size'));
        $postMaxSize         = $postMaxSize * 1024 * 1024;
        
        $memoryLimit         = (int)(ini_get('memory_limit'));
        $memoryLimit         = $memoryLimit * 1024 * 1024;
        
        if(
			$serverContentLength >  $uploadMaxFileSize OR
			$serverContentLength >  $postMaxSize OR
			$serverContentLength >  $memoryLimit
		)
		{ // Log error
		    $KB    = 1024 * 1024;
		    
		    $info = JText::sprintf("COM_CROWDFUNDING_ERROR_FILE_INFOMATION", 
		        round($serverContentLength/$KB, 0), 
		        round($uploadMaxFileSize/$KB, 0), 
		        round($postMaxSize/$KB, 0), 
		        round($memoryLimit/$KB, 0)
	        );
	        
	        // Log error
		    JLog::add($info);
		    throw new Exception(JText::_("COM_CROWDFUNDING_ERROR_WARNFILETOOLARGE"), ITPrismErrors::CODE_WARNING);
		}
		
        if(!empty($uploadedFile['error'])){
                
            switch($uploadedFile['error']){
                case UPLOAD_ERR_INI_SIZE:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_INI_SIZE'), ITPrismErrors::CODE_HIDDEN_WARNING);
                case UPLOAD_ERR_FORM_SIZE:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_FORM_SIZE'), ITPrismErrors::CODE_HIDDEN_WARNING);
                case UPLOAD_ERR_PARTIAL:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_PARTIAL'), ITPrismErrors::CODE_HIDDEN_WARNING);
                case UPLOAD_ERR_NO_FILE:
//                    throw new Exception( JText::_( 'COM_CROWDFUNDING_ERROR_UPLOAD_ERR_NO_FILE' ), ITPrismErrors::CODE_HIDDEN_WARNING);
                    break;
                case UPLOAD_ERR_NO_TMP_DIR:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_NO_TMP_DIR'), ITPrismErrors::CODE_HIDDEN_WARNING);
                case UPLOAD_ERR_CANT_WRITE:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_CANT_WRITE'), ITPrismErrors::CODE_HIDDEN_WARNING);
                case UPLOAD_ERR_EXTENSION:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_EXTENSION'), ITPrismErrors::CODE_HIDDEN_WARNING);
                default:
                    throw new Exception(JText::_('COM_CROWDFUNDING_ERROR_UPLOAD_ERR_UNKNOWN'), ITPrismErrors::CODE_HIDDEN_WARNING);
            }
        
        }
            
    }
    
}